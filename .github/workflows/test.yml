name: Test and Validation

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

jobs:
  test-python:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Test unified launcher
        run: |
          # Test launcher help and basic functionality
          poetry run python run.py --help
          echo "✅ Launcher help command works"
          
          # Test configuration parsing
          poetry run python -c "
          import sys
          import os
          sys.path.insert(0, '.')
          from run import get_configuration, parse_arguments
          
          # Test environment variable configuration
          os.environ['MULTITENANT_MODE'] = 'false'
          os.environ['ENABLE_API'] = 'true'
          
          class MockArgs:
              single_user = False
              multi_tenant = False
              with_api = False
              host = None
              port = None
              debug = False
              share = False
          
          config = get_configuration(MockArgs())
          assert config['multitenant_mode'] == False
          assert config['enable_api'] == True
          print('✅ Configuration parsing works correctly')
          "

      - name: Run LangWatch integration tests
        run: poetry run python test_langwatch_integration.py

      - name: Test unified launcher with API
        run: |
          # Start unified launcher with API in background
          ENABLE_API=true poetry run python run.py --port 7861 &
          APP_PID=$!
          
          # Wait for app to start
          sleep 10
          
          # Test health endpoint
          for i in {1..5}; do
            if curl -f http://127.0.0.1:7861/api/health; then
              echo "✅ Health check passed"
              break
            fi
            echo "Attempt $i failed, retrying..."
            sleep 3
          done
          
          # Test API documentation
          curl -f http://127.0.0.1:7861/api/docs || exit 1
          echo "✅ API documentation accessible"
          
          # Clean up
          kill $APP_PID
          
          echo "✅ Unified launcher API tests passed"

  test-docker:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ai-prompt-manager:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Start container in background
          docker run -d -p 7860:7860 --name test-container ai-prompt-manager:test
          
          # Wait for container to be ready
          sleep 30
          
          # Test health endpoint
          for i in {1..10}; do
            if curl -f http://localhost:7860/api/health; then
              echo "✅ Health check passed"
              break
            fi
            echo "Attempt $i failed, retrying..."
            sleep 5
          done
          
          # Test web interface
          curl -f http://localhost:7860/ | grep -q "Multi-Tenant AI Prompt Manager" || exit 1
          echo "✅ Web interface accessible"
          
          # Test API documentation
          curl -f http://localhost:7860/api/docs || exit 1
          echo "✅ API documentation accessible"
          
          # Clean up
          docker stop test-container
          docker rm test-container

  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Check Python syntax
        run: |
          poetry run python -m py_compile *.py
          echo "✅ Python syntax check passed"

      - name: Check imports
        run: |
          poetry run python -c "
          import prompt_manager
          import prompt_data_manager
          import auth_manager
          import api_token_manager
          import api_endpoints
          import langwatch_optimizer
          print('✅ All imports successful')
          "