name: Test and Validation

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

jobs:
  test-python:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Test unified launcher
        run: |
          # Test launcher help and basic functionality
          poetry run python run.py --help
          echo "✅ Launcher help command works"
          
          # Test configuration parsing
          poetry run python -c "
          import sys
          import os
          sys.path.insert(0, '.')
          from run import get_configuration, parse_arguments
          
          # Test environment variable configuration
          os.environ['MULTITENANT_MODE'] = 'false'
          os.environ['ENABLE_API'] = 'true'
          
          class MockArgs:
              single_user = False
              multi_tenant = False
              with_api = False
              host = None
              port = None
              debug = False
              share = False
          
          config = get_configuration(MockArgs())
          assert config['multitenant_mode'] == False
          assert config['enable_api'] == True
          print('✅ Configuration parsing works correctly')
          "

      - name: Run LangWatch integration tests
        run: poetry run python test_langwatch_integration.py

      - name: Test unified launcher with API and robust wait mechanisms
        run: |
          # Start unified launcher with API in background with proper logging
          echo "Starting unified launcher with API..."
          ENABLE_API=true poetry run python run.py --port 7861 > launcher.log 2>&1 &
          APP_PID=$!
          echo "Launcher started with PID: $APP_PID"
          
          # Function to check if server is ready
          check_server_ready() {
            local max_attempts=60  # 60 attempts = 60 seconds max wait
            local attempt=1
            
            echo "Waiting for launcher API to be ready..."
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt of $max_attempts..."
              
              # Check if process is still running
              if ! kill -0 $APP_PID 2>/dev/null; then
                echo "ERROR: Launcher process died!"
                echo "=== Launcher Log ==="
                cat launcher.log || echo "No log file found"
                return 1
              fi
              
              # Try to connect to health endpoint
              if curl -s --max-time 5 http://127.0.0.1:7861/api/health >/dev/null 2>&1; then
                echo "✅ Launcher API is ready!"
                return 0
              fi
              
              # Show progress every 10 attempts
              if [ $((attempt % 10)) -eq 0 ]; then
                echo "=== Recent Launcher Log ==="
                tail -5 launcher.log 2>/dev/null || echo "No log available yet"
              fi
              
              # Wait 1 second between attempts
              sleep 1
              attempt=$((attempt + 1))
            done
            
            echo "❌ Launcher API failed to become ready within 60 seconds"
            echo "=== Full Launcher Log ==="
            cat launcher.log || echo "No log file found"
            return 1
          }
          
          # Wait for server to be ready
          if check_server_ready; then
            echo "Proceeding with launcher API tests..."
            
            # Test health endpoint with detailed output
            echo "Testing health endpoint..."
            if curl -f -v http://127.0.0.1:7861/api/health; then
              echo "✅ Health endpoint test passed"
            else
              echo "❌ Health endpoint test failed"
              kill $APP_PID 2>/dev/null || true
              exit 1
            fi
            
            # Test API documentation
            echo "Testing API documentation..."
            if curl -f http://127.0.0.1:7861/api/docs >/dev/null 2>&1; then
              echo "✅ API documentation accessible"
            else
              echo "❌ API documentation test failed"
              kill $APP_PID 2>/dev/null || true
              exit 1
            fi
            
            # Test unauthenticated endpoint (should return 403)
            echo "Testing unauthenticated endpoint..."
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:7861/api/prompts)
            echo "HTTP response code: $HTTP_CODE"
            
            if [ "$HTTP_CODE" = "403" ]; then
              echo "✅ Authentication test passed (got 403 as expected)"
            else
              echo "⚠️ Authentication test got $HTTP_CODE (may be expected in some configurations)"
            fi
            
            echo "✅ All launcher API tests passed"
          else
            echo "❌ Launcher API startup failed"
            exit 1
          fi
          
          # Clean up
          echo "Stopping launcher (PID: $APP_PID)..."
          kill $APP_PID 2>/dev/null || true
          
          # Wait for process to stop gracefully
          sleep 2
          
          # Force kill if still running
          if kill -0 $APP_PID 2>/dev/null; then
            echo "Force killing launcher..."
            kill -9 $APP_PID 2>/dev/null || true
          fi
          
          echo "✅ Launcher API test cleanup completed"

  test-docker:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ai-prompt-manager:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image with robust health checks
        run: |
          # Start container in background
          echo "Starting Docker container..."
          docker run -d -p 7860:7860 --name test-container ai-prompt-manager:test
          CONTAINER_ID=$(docker ps -q --filter name=test-container)
          echo "Container started with ID: $CONTAINER_ID"
          
          # Function to check container health
          check_container_health() {
            local max_attempts=120  # 2 minutes max wait (120 * 1 second)
            local attempt=1
            
            echo "Waiting for container to be ready..."
            while [ $attempt -le $max_attempts ]; do
              echo "Health check attempt $attempt of $max_attempts..."
              
              # Check if container is still running
              if ! docker ps --filter name=test-container --filter status=running --quiet | grep -q .; then
                echo "ERROR: Container is not running!"
                echo "=== Container Logs ==="
                docker logs test-container || echo "No logs available"
                return 1
              fi
              
              # Try health endpoint
              if curl -s --max-time 5 http://localhost:7860/api/health >/dev/null 2>&1; then
                echo "✅ Container is ready!"
                return 0
              fi
              
              # Show container logs every 15 attempts for debugging
              if [ $((attempt % 15)) -eq 0 ]; then
                echo "=== Container Status (attempt $attempt) ==="
                docker ps --filter name=test-container
                echo "=== Recent Container Logs ==="
                docker logs --tail 10 test-container 2>&1 || echo "No logs available"
              fi
              
              sleep 1
              attempt=$((attempt + 1))
            done
            
            echo "❌ Container failed to become ready within 2 minutes"
            echo "=== Final Container Logs ==="
            docker logs test-container || echo "No logs available"
            return 1
          }
          
          # Wait for container to be ready
          if check_container_health; then
            echo "Proceeding with container tests..."
            
            # Test health endpoint
            echo "Testing health endpoint..."
            if curl -f -v http://localhost:7860/api/health; then
              echo "✅ Health check passed"
            else
              echo "❌ Health check failed"
              docker logs test-container
              docker stop test-container
              docker rm test-container
              exit 1
            fi
            
            # Test web interface
            echo "Testing web interface..."
            if curl -f http://localhost:7860/ | grep -q "Multi-Tenant AI Prompt Manager"; then
              echo "✅ Web interface accessible"
            else
              echo "❌ Web interface test failed"
              docker logs test-container
              docker stop test-container
              docker rm test-container
              exit 1
            fi
            
            # Test API documentation
            echo "Testing API documentation..."
            if curl -f http://localhost:7860/api/docs >/dev/null 2>&1; then
              echo "✅ API documentation accessible"
            else
              echo "❌ API documentation test failed"
              docker logs test-container
              docker stop test-container
              docker rm test-container
              exit 1
            fi
            
            echo "✅ All container tests passed"
          else
            echo "❌ Container startup failed"
            docker stop test-container 2>/dev/null || true
            docker rm test-container 2>/dev/null || true
            exit 1
          fi
          
          # Clean up
          echo "Cleaning up container..."
          docker stop test-container
          docker rm test-container
          echo "✅ Container test cleanup completed"

  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Check Python syntax
        run: |
          poetry run python -m py_compile *.py
          echo "✅ Python syntax check passed"

      - name: Check imports
        run: |
          poetry run python -c "
          import prompt_manager
          import prompt_data_manager
          import auth_manager
          import api_token_manager
          import api_endpoints
          import langwatch_optimizer
          print('✅ All imports successful')
          "